<launch>
  <!-- This launch file is responsible for launching all of the necessesary nodes and launch files needed to setup a test. -->

  <!-- Enable gazebo gui or not -->
  <arg name="gui" default="true" />
  
  <!-- Determin if you want simulation or not -->
  <arg name="sim" default="true" />
  
  <!-- Determine if you want to use the user input for goal position or starting position or do you want to manually put the goal and starting position -->
  <arg name="user_choose" default="csvInput" />

  <!-- Determine whether an obstacle robot should be spawned in -->
  <arg name="obstacle_bot" default="true" />
  <arg name="obstacle_bot_name" default="obstacle_bot"/>

  <!-- Use 3d or 2d navigation -->
  <arg name="3d" default="false" />
  
  <!-- Define map settings, values are set in the level launch files-->
  <arg name="world_name" default="level4" />

  <!-- Name for the X and Y axis that would be needed for the input of for all the robots that will be used with the API -->
  <arg name="robot1_x" default="0" />
  <arg name="robot1_y" default="0" />

  <arg name="robot2_x" default="0" />
  <arg name="robot2_y" default="0" />

  <arg name="obstacle_bot_x" default="0" />
  <arg name="obstacle_bot_y" default="0" />

  <!-- Type of robot being spawned in -->
  <arg name="robot" default="pioneer" />
  
  <!-- Type of robot2 being spawned in -->
  <arg name="robot2" default="fetch" />
  <arg name="robot2_determine" default="true" />

  <!-- Define the spawn location for the robot1 and robot2 in Gazebo-->
  <arg name="spawn_x" value="$(arg robot1_x)" />
  <arg name="spawn_y" value="$(arg robot1_y)" />
  <arg name="spawn_z" default="0" />
  <arg name="spawn_yaw" default="0" />

  <arg name="robot2_spawn_x" value="$(arg robot2_x)" />
  <arg name="robot2_spawn_y" value="$(arg robot2_y)" />
  <arg name="robot2_spawn_z" default="0" />
  <arg name="robot2_spawn_yaw" default="0" />


  <!-- Define the spawn location for the obstacle bot -->
  <arg name="spawn_obstacle_bot_x" value="$(arg obstacle_bot_x)" />
  <arg name="spawn_obstacle_bot_y" value="$(arg obstacle_bot_y)" />
  <arg name="spawn_obstacle_bot_z" default="0" />
  <arg name="spawn_obstacle_bot_yaw" default="0" />




  <!-- START OPENING -->
  <!-- Determine whether a dynamic obstacle should be spawned in -->
  <arg name="dynamic_obstacle" default="false" />

  <!-- Define the two spawn locations for the dymanic obstacle to teleport in between if wanted -->
  <arg name="obstacle_1_x" default="0" />
  <arg name="obstacle_1_y" default="0" />
  <arg name="obstacle_1_z" default="0" />
  <arg name="obstacle_1_theta" default="0" />
  <arg name="obstacle_2_x" default="0" />
  <arg name="obstacle_2_y" default="0" />
  <arg name="obstacle_2_z" default="0" />
  <arg name="obstacle_2_theta" default="0" />

  <!-- Name of dynamic obstacle that will be spawned in if needed -->
  <arg name="obstacle_name" default="caution_100cm_block" />

  <!-- Flip obstacle spawner -->
  <arg name="flip_obstacle" default="false" />




  <!-- SPAWN WORLD--> 
  <!-- Include spawn_world.launch and set it's arguments if simulation is needed-->
  <include file="$(find robot_navigation)/launch/utilities/spawn_world.launch">
    <arg name="world_name" value="$(arg world_name)" />
    <arg name="gui" value="$(arg gui)" />
  </include>




  <!-- ROBOT NODE -->
  <!-- Setup when it is wanted -->
  <!-- Call launch function for global starting position publisher for robot1 -->
  <!-- Publish robot spawn if robot resetting is needed -->
  <node name="robot_spawn_publisher" pkg="robot_navigation" type="robot_spawn_publisher" ns="$(arg robot)" output="screen">
    <!-- where it is determine to make the input into user input or the input in the csv files -->
    <param name="user_choose" value="$(arg user_choose)" />
    <param name="robot_x_position" value="$(arg spawn_x)" />
    <param name="robot_y_position" value="$(arg spawn_y)" />
    <param name="robot_z_rotation" value="$(arg spawn_yaw)" />
  </node>


  <!-- Setup robot -->
  <include file="$(find robot_navigation)/launch/robots/spawn_$(arg robot).launch">
    <arg name="x" value="$(arg spawn_x)" />
    <arg name="y" value="$(arg spawn_y)" />
    <arg name="z" value="$(arg spawn_z)" />
    <arg name="yaw" value="$(arg spawn_yaw)" />
    <arg name="robot" value="$(arg robot)" />
  </include>


  <!-- SETUP robot for robot_navigation -->
  <!-- Setup robot bot -->
  <include file="$(find robot_navigation)/launch/robots/setup_$(arg robot).launch">
    <arg name="level" value="$(arg world_name)" />
    <arg name="navigate" value="true" />
    <arg name="3d" value="$(arg 3d)" />
    <arg name="static_map" value="true" />
    <arg name="robot" value="$(arg robot)" />
  </include>


  <!-- Save spawn location to parameter server for amcl initialization -->
  <param name="robot_spawn_x" value="$(arg spawn_x)" />
  <param name="robot_spawn_y" value="$(arg spawn_y)" />
  <param name="robot_spawn_z" value="$(arg spawn_z)" />
  <param name="robot_spawn_yaw" value="$(arg spawn_yaw)" />





  <!-- ROBOT2 NODE -->
  <!-- Setup when it is wanted -->
  <!-- Call launch function for global starting position publisher for robot2 -->
  <!-- Publish robot spawn if robot resetting is needed -->
  <node name="robot2_spawn_publisher" pkg="robot_navigation" type="robot_spawn_publisher" ns="$(arg robot2)" output="screen">
    <!-- where it is determine to make the input into user input or the input in the csv files -->
    <param name="user_choose" value="$(arg user_choose)" />
    <param name="robot_x_position" value="$(arg robot2_spawn_x)" />
    <param name="robot_y_position" value="$(arg robot2_spawn_y)" />
    <param name="robot_z_rotation" value="$(arg robot2_spawn_yaw)" />
  </node>


  <!-- Setup robot -->
  <include file="$(find robot_navigation)/launch/robots/spawn_$(arg robot2).launch">
    <arg name="x" value="$(arg robot2_spawn_x)" />
    <arg name="y" value="$(arg robot2_spawn_y)" />
    <arg name="z" value="$(arg robot2_spawn_z)" />
    <arg name="yaw" value="$(arg robot2_spawn_yaw)" />
    <arg name="robot" value="$(arg robot2)" />
  </include>


  <!-- SETUP robot for robot_navigation -->
  <include file="$(find robot_navigation)/launch/robots/setup_$(arg robot2).launch">
    <arg name="level" value="$(arg world_name)" />
    <arg name="navigate" value="true" />
    <arg name="3d" value="$(arg 3d)" />
    <arg name="static_map" value="true" />
    <arg name="robot" value="$(arg robot2)" />
  </include>


  <!-- Save spawn location to parameter server for amcl initialization -->
  <param name="robot2_spawn_x" value="$(arg robot2_spawn_x)" />
  <param name="robot2_spawn_y" value="$(arg robot2_spawn_y)" />
  <param name="robot2_spawn_z" value="$(arg robot2_spawn_z)" />
  <param name="robot2_spawn_yaw" value="$(arg robot2_spawn_yaw)" />





  <!-- OBSTACLE BOT NODE -->
  <!-- Setup when it is wanted -->
  <!-- Call launch function for global starting position publisher for obstacle bot -->
  <!-- Publish obstacle bot spawn if obstacle bot resetting is needed -->
  <node name="obstacle_bot_spawn_publisher" pkg="robot_navigation" type="obstacle_bot_spawn_publisher" ns="$(arg obstacle_bot_name)" output="screen">
    <!-- where it is determine to make the input into user input or the input in the csv files -->
    <param name="user_choose" value="$(arg user_choose)" />
    <param name="obstacle_bot_x_position" value="$(arg spawn_obstacle_bot_x)" />
    <param name="obstacle_bot_y_position" value="$(arg spawn_obstacle_bot_y)" />
    <param name="obstacle_bot_z_rotation" value="$(arg spawn_yaw)" />
  </node>


  <!-- Setup obstacle bot if wanted -->
  <include file="$(find robot_navigation)/launch/robots/spawn_obstacle_bot.launch" if="$(arg obstacle_bot)">
    <arg name="x" value="$(arg spawn_obstacle_bot_x)" />
    <arg name="y" value="$(arg spawn_obstacle_bot_y)" />
    <arg name="z" value="$(arg spawn_obstacle_bot_z)" />
    <arg name="yaw" value="$(arg spawn_obstacle_bot_yaw)" />
  </include>

  <!-- SETUP obstacle_bot for robot_navigation -->
  <!-- Setup obstacle bot -->
  <include file="$(find robot_navigation)/launch/robots/setup_$(arg obstacle_bot_name).launch">

  </include>



  <group if="$(arg obstacle_bot)">
    <!-- Save spawn location to parameter server for amcl initialization -->
    <param name="obstacle_bot_spawn_x" value="$(arg spawn_obstacle_bot_x)" />
    <param name="obstacle_bot_spawn_y" value="$(arg spawn_obstacle_bot_y)" />
    <param name="obstacle_bot_spawn_z" value="$(arg spawn_obstacle_bot_z)" />
    <param name="obstacle_bot_spawn_yaw" value="$(arg spawn_obstacle_bot_yaw)" />
  </group>
  






  <!-- Setup dynamic obstacle spawner if wanted -->
  <node name="dynamic_obstacle_manager" pkg="robot_navigation" type="dynamic_obstacles" if="$(arg dynamic_obstacle)">
    <param name="model_description" textfile="$(find robot_navigation)/resources/models/obstacles/$(arg obstacle_name)/model.sdf" />
    <param name="invert_spawn_positions" value="$(arg flip_obstacle)" />
    <param name="x_pos_1" value="$(arg obstacle_1_x)" />
    <param name="y_pos_1" value="$(arg obstacle_1_y)" />
    <param name="z_pos_1" value="$(arg obstacle_1_z)" />
    <param name="theta_1" value="$(arg obstacle_1_theta)" />
    <param name="x_pos_2" value="$(arg obstacle_2_x)" />
    <param name="y_pos_2" value="$(arg obstacle_2_y)" />
    <param name="z_pos_2" value="$(arg obstacle_2_z)" />
    <param name="theta_2" value="$(arg obstacle_2_theta)" />
  </node>

</launch>
