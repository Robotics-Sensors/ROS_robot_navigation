<launch>
  <!-- This launch file is responsible for launching all of the necessesary nodes and launch files needed launch and execute a complete test -->

  <!-- Determine whether the robot is physical or simulated-->
  <arg name="sim" default="true" />

  <!-- Determine if you want to use the user input for goal position or starting position or do you want to manually put the goal and starting position -->
  <arg name="user_choose" default="csvInput" />

  <!-- If in sim, enable gazebo gui or not -->
  <arg name="gui" default="true" />

  <!-- Use 3d or 2d navigation -->
  <arg name="3d" default="false" />

  <!-- Use the static global map while navigating -->
  <arg name="static_map" default="true" />

  <!-- Type of robot being spawned in -->
  <arg name="robot" default="pioneer" />

  <!-- Type of robot2 being spawned -->
  <arg name="robot2" default="fetch" />
  

  <!-- Name for the X and Y axis that would be needed for the input of for all the robots that will be used with the API -->
  <arg name="robot1_x" default="0" />
  <arg name="robot1_y" default="0" />

  <arg name="robot2_x" default="0" />
  <arg name="robot2_y" default="0" />

  <arg name="obstacle_bot_x" default="0" />
  <arg name="obstacle_bot_y" default="0" />


  <!-- Define map settings, values are set in the level launch files-->
  <arg name="world_name" default="level4"/>
  
  <!-- The obstacle bot name -->
  <arg name="obstacle_bot_name" default="obstacle_bot" />
  
  <!-- Determine whether an obstacle robot should be spawned in -->
  <arg name="obstacle_bot" default="true" />

  <!-- Determine whether a dynamic obstacle should be spawned in -->
  <arg name="dynamic_obstacle" default="false" />

  <!-- Name of dynamic obstacle that will be spawned in if needed -->
  <arg name="obstacle_name" default="caution_100cm_block" />

  <!-- Flip obstacle spawner -->
  <arg name="flip_obstacle" default="true" />

  <!-- delay for start_test to start -->
  <arg name="start_test_delay_robot1" value="5.0" />

  <!-- delay for start_test to start -->
  <arg name="start_test_delay_robot2" value="10.0" />

  <!-- delay for start_test to start -->
  <arg name="start_test_delay_obstacle_bot" value="15.0" />

  <!-- number of iterations the robot will perform -->
  <arg name="iterations" default="1" />

  <!-- toggle whether the robot should clear the costmaps in between iterations -->
  <arg name="clear_costmaps" default="true" />

  <!-- Set up the test -->
 <include file="$(find robot_navigation)/launch/utilities/setup_test.launch">
    <arg name="sim" value="$(arg sim)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="3d" value="$(arg 3d)" />
    <arg name="user_choose" value="$(arg user_choose)" />
    <arg name="static_map" value="$(arg static_map)" />
    <arg name="robot" value="$(arg robot)" />
    <arg name="robot2" value="$(arg robot2)" />
    <arg name="obstacle_bot_name" value="$(arg obstacle_bot_name)" />
    <arg name="world_name" value="$(arg world_name)" />
    <arg name="obstacle_bot" value="$(arg obstacle_bot)" />
    <arg name="dynamic_obstacle" value="$(arg dynamic_obstacle)" />
    <arg name="obstacle_name" value="$(arg obstacle_name)" />
    <arg name="flip_obstacle" value="$(arg flip_obstacle)" />
    <arg name="robot1_x" value="$(arg robot1_x)" />
    <arg name="robot1_y" value="$(arg robot1_y)" />
    <arg name="robot2_x" value="$(arg robot2_x)" />
    <arg name="robot2_y" value="$(arg robot1_y)" />
    <arg name="obstacle_bot_x" value="$(arg obstacle_bot_x)" />
    <arg name="obstacle_bot_y" value="$(arg obstacle_bot_y)" />
  </include> 


  <!-- Navigation for the robots starts here -->
  <!-- Start moving robot 1-->
  <node name="robot_mover" pkg="robot_navigation" type="robot_mover" output="screen" required="true" ns="$(arg robot)" launch-prefix="bash -c 'sleep $(arg start_test_delay_robot1); $0 $@' ">
    <param name="iterations" value="$(arg iterations)" />
    <param name="clear_costmaps" value="$(arg clear_costmaps)" />
  </node>

  <!-- Start moving robot 2-->
  <node name="robot2_mover" pkg="robot_navigation" type="robot2_mover" output="screen" required="true" ns="$(arg robot2)" launch-prefix="bash -c 'sleep $(arg start_test_delay_robot2); $0 $@' ">
    <param name="iterations" value="$(arg iterations)" />
    <param name="clear_costmaps" value="$(arg clear_costmaps)" />
  </node>

  <!-- Start moving obstacle_bot if present-->
  <node name="obstacle_bot_mover" pkg="robot_navigation" type="obstacle_bot_mover" output="screen" required="true" ns="$(arg obstacle_bot_name)" launch-prefix="bash -c 'sleep $(arg start_test_delay_obstacle_bot); $0 $@' ">
    <param name="iterations" value="$(arg iterations)" />
    <param name="clear_costmaps" value="$(arg clear_costmaps)" />
  </node>

</launch>
