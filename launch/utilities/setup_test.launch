<launch>
  <!-- This launch file is responsible for launching all of the necessesary nodes and launch files needed to setup a test. -->

  <!-- Determine whether the robot is physical or simulated-->
  <arg name="sim" default="true" />

  <!-- If in sim, enable gazebo gui or not -->
  <arg name="gui" default="true" />

  <!-- Determine if you want to use the user input for goal position or starting position or do you want to manually put the goal and starting position -->
  <arg name="user_choose" default="csvInput" />

  <!-- Use 3d or 2d navigation -->
  <arg name="3d" default="false" />

  <!-- Use the static global map while navigating -->
  <arg name="static_map" default="true" />

  <!-- Type of robot being spawned in -->
  <arg name="robot" default="pioneer" />

  <!-- Type of robot being spawned  -->
  <arg name="robot2" default="fetch" />

  <!-- Define map settings, values are set in the level launch files-->
  <arg name="world_name" default="level4"/>

  <!-- Determine whether an obstacle robot should be spawned in -->
  <arg name="obstacle_bot" default="true" />

  <!-- Determine whether a dynamic obstacle should be spawned in -->
  <arg name="dynamic_obstacle" default="false" />

  <!-- Name for the X and Y axis that would be needed for the input of for all the robots that will be used with the API -->
  <arg name="robot1_x" default="0" />
  <arg name="robot1_y" default="0" />

  <arg name="robot2_x" default="0" />
  <arg name="robot2_y" default="0" />

  <arg name="obstacle_bot_x" default="0" />
  <arg name="obstacle_bot_y" default="0" />

  <!-- Determine obstacle bot name -->
  <arg name="obstacle_bot_name" default="obstacle_bot" />

  <!-- Name of dynamic obstacle that will be spawned in if needed -->
  <arg name="obstacle_name" default="caution_100cm_block" />

  <!-- Flip obstacle spawner -->
  <arg name="flip_obstacle" default="true" />

  <!-- delay for start_test to start -->
  <arg name="start_test_delay_robot1" value="10.0" />

  <!-- delay for start_test to start -->
  <arg name="start_test_delay_robot2" value="15.0" />

  <!-- delay for start_test to start -->
  <arg name="start_test_delay_obstacle_bot" value="20.0" />


  <!-- Spawn robots and obstacle bots -->
  <include file="$(find robot_navigation)/launch/robot_and_obstacle_bot_sim/robot_and_obstacle_bot_simulation.launch">
    <arg name="world_name" value="$(arg world_name)" />
    <arg name="robot" value="$(arg robot)" />
    <arg name="robot2" value="$(arg robot2)" />
    <arg name="user_choose" value="$(arg user_choose)" />
    <arg name="obstacle_bot_name" value="$(arg obstacle_bot_name)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="3d" value="$(arg 3d)" />
    <arg name="robot1_x" value="$(arg robot1_x)" />
    <arg name="robot1_y" value="$(arg robot1_y)" />
    <arg name="robot2_x" value="$(arg robot2_x)" />
    <arg name="robot2_y" value="$(arg robot1_y)" />
    <arg name="obstacle_bot_x" value="$(arg obstacle_bot_x)" />
    <arg name="obstacle_bot_y" value="$(arg obstacle_bot_y)" />
  </include>


  <!-- Setup when it is wanted -->
  <!-- Call launch function for global goal publisher for robot1 -->
  <include file="$(find robot_navigation)/launch/goals/robots_goals.launch" if="$(eval sim == 'true')">
    <arg name="world_name" value="$(arg world_name)" />
    <arg name="robot" value="$(arg robot)" />
  </include>



  <!-- Setup when it is wanted -->
  <!-- Call launch function for global goal publisher for robot2 -->
  <include file="$(find robot_navigation)/launch/goals/robots2_goals.launch" if="$(eval sim == 'true')">
    <arg name="world_name" value="$(arg world_name)" />
    <arg name="robot" value="$(arg robot2)" />
  </include>


  <!-- Setup loggers for robot1 -->
  <!-- <include file="$(find robot_navigation)/launch/logger/robot1_loggers.launch" launch-prefix="bash -c 'sleep $(arg start_test_delay_robot1); $0 $@' ">>
    <arg name="robot" value="$(arg robot)" />
    <arg name="level" value="$(arg world_name)" />
  </include> -->


  <!-- Setup loggers for robot2 -->
  <!-- <include file="$(find robot_navigation)/launch/logger/robot2_loggers.launch" launch-prefix="bash -c 'sleep $(arg start_test_delay_robot2); $0 $@' ">>
    <arg name="robot" value="$(arg robot2)" />
    <arg name="level" value="$(arg world_name)" />
  </include> -->


  <!-- Setup loggers for obstacle bot -->
  <!-- <include file="$(find robot_navigation)/launch/logger/obstacle_bot_loggers.launch" launch-prefix="bash -c 'sleep $(arg start_test_delay_obstacle_bot); $0 $@' ">>
    <arg name="robot" value="$(arg obstacle_bot_name)" />
    <arg name="level" value="$(arg world_name)" />
  </include> -->


  <!-- Setup dord calculator if navigating in nerve_long_hall -->
  <include file="$(find robot_navigation)/launch/dord_calculator.launch" if="$(eval world_name == 'nerve_long_hall')">
    <arg name="robot" value="$(arg robot)" />
    <arg name="level" value="$(arg world_name)" />
    <arg name="goal" value="goal_b" />
    <arg name="obstacle_x" value="0.33057" />
    <arg name="obstacle_y" value="12.40157" />
  </include>

  
  <!-- Setup obstacle bot if wanted -->
  <!-- Set up global goal publisher for the obstacle_bot and invert goals -->
  <include file="$(find robot_navigation)/launch/goals/obstacle_bot_goal.launch" if="$(eval sim == 'true')">
    <arg name="world_name" value="$(arg world_name)" />
    <arg name="obstacle_bot_name" value="$(arg obstacle_bot_name)" />
  </include>
  <!-- </group> -->

</launch>
